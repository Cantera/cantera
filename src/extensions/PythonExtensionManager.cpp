//! @file PythonExtensionManager.cpp

// This file is part of Cantera. See License.txt in the top-level directory or
// at https://cantera.org/license.txt for license and copyright information.

#include "cantera/extensions/PythonExtensionManager.h"

#include "cantera/kinetics/ReactionRateDelegator.h"
#include "pythonExtensions.h" // generated by Cython

namespace Cantera
{

PythonExtensionManager::PythonExtensionManager()
{
    if (!Py_IsInitialized()) {
        Py_Initialize();
    }

    // PEP 489 Multi-phase initialization
    PyModuleDef* modDef = (PyModuleDef*) PyInit_pythonExtensions();
    if (!modDef->m_slots || !PyModuleDef_Init(modDef)) {
        throw CanteraError("PythonExtensionManager::PythonExtensionManager",
                            "Failed to import 'pythonExtensions' module");
    }

    // Following example creation of minimal ModuleSpec from Python's import.c
    PyObject *attrs = Py_BuildValue("{ss}", "name", "pythonExtensions");
    if (attrs == NULL) {
        throw CanteraError("PythonExtensionManager::PythonExtensionManager",
                           "Py_BuildValue failed");
    }
    PyObject *spec = _PyNamespace_New(attrs);
    Py_DECREF(attrs);
    if (spec == NULL) {
        throw CanteraError("PythonExtensionManager::PythonExtensionManager",
                            "_PyNamespace_New failed");
    }
    PyObject* pyModule = PyModule_FromDefAndSpec(modDef, spec);
    if (!pyModule) {
        CanteraError("PythonExtensionManager::PythonExtensionManager",
                     "PyModule_FromDefAndSpec failed");
    }
    if (!PyModule_ExecDef(pyModule, modDef)) {
        CanteraError("PythonExtensionManager::PythonExtensionManager",
                     "PyModule_ExecDef failed");
    }
    Py_DECREF(spec);
    Py_DECREF(pyModule);
}

void PythonExtensionManager::registerRateBuilders(const std::string& extensionName)
{
    char* c_rateTypes = ct_getPythonExtensibleRateTypes(extensionName);
    std::string rateTypes(c_rateTypes);
    free(c_rateTypes);
    writelog("Module returned types: '{}'\n", rateTypes);
}

};
