"""Parser for tag files and XML generated by doxygen."""

# This file is part of Cantera. See License.txt in the top-level directory or
# at https://cantera.org/license.txt for license and copyright information.

import sys
from pathlib import Path
import re
import logging
#from dataclasses import dataclass

#from ._dataclasses import ArgList, Param
#from ._helpers import with_unpack_iter


_logger = logging.getLogger(__name__)

_tag_path = Path(__file__).parents[3] / "build" / "doc"
_xml_path = _tag_path / "doxygen" / "xml"


class TagFileParser:
    """Class handling contents of doxygen tag file."""

    def _parse_doxyfile(self, doxygen_tags: str, bases: list[str]):
        """Retrieve class and function information from Cantera namespace."""

        def xml_compounds(kind: str, names: list[str]) -> dict[str,str]:
            regex = re.compile(rf'<compound kind="{kind}"[\s\S]*?</compound>')
            found = []
            compounds = {}
            for compound in re.findall(regex, doxygen_tags):
                qualified_name = xml_tag("name", compound)
                compound_name = qualified_name.split(":")[-1]
                if compound_name in names:
                    found.append(compound_name)
                    compounds[compound_name] = compound
                    if not set(names) - set(found):
                        return compounds
            missing = '", "'.join(set(names) - set(found))
            msg = f"Missing {kind!r} compound(s):\n    {missing!r}\nusing regex "
            msg += f"{regex}. Continuing with remaining compounds: \n    {found!r}"
            _logger.error(msg)

        # Parse content of namespace Cantera
        namespace = xml_compounds("namespace", ["Cantera"])["Cantera"]
        qualified_names = xml_tags("class", namespace, suffix='kind="class"')
        class_names = [_.split(":")[-1] for _ in qualified_names]

        # Handle exceptions for unknown/undocumented classes
        unknown = set(bases) - set(class_names)
        if unknown:
            unknown = "', '".join(unknown)
            _logger.warning(
                "Class(es) in configuration file are missing from tag file: '%s'",
                unknown)

        # Parse content of classes that are specified by the configuration file
        class_names = set(bases) & set(class_names)
        classes = xml_compounds("class", class_names)

        def xml_members(kind: str, text: str, prefix="") -> dict[str, str]:
            regex = re.compile(rf'<member kind="{kind}"[\s\S]*?</member>')
            functions = {}
            for func in re.findall(regex, text):
                func_name = f'{prefix}{xml_tag("name", func)}'
                if func_name in functions:
                    functions[func_name].append(func)
                else:
                    functions[func_name] = [func]
            return functions

        # Get known functions from namespace and methods from classes
        self._known = xml_members("function", namespace)
        for name, cls in classes.items():
            prefix = f"{name}::"
            self._known.update(xml_members("function", cls, prefix))

    def __init__(self, bases: dict[str, str]) -> None:
        tag_file = _tag_path / "Cantera.tag"
        if not tag_file.exists():
            msg = (f"Tag file does not exist at expected location:\n    {tag_file}\n"
                "Run 'scons doxygen' to generate.")
            _logger.critical(msg)
            sys.exit(1)

        with tag_file.open() as fid:
            doxygen_tags = fid.read()

        logging.info("Parsing doxygen tags...")
        self._parse_doxyfile(doxygen_tags, bases)


def xml_tag(tag: str, text: str, suffix: str="", index=0) -> str:
    """Extract content enclosed between XML tags, optionally skipping matches."""
    if suffix:
        suffix = f" {suffix.strip()}"
    regex = re.compile(rf'(?<=<{tag}{suffix}>)(.*?)(?=</{tag}>)', flags=re.DOTALL)
    match = re.findall(regex, text)
    if index >= len(match):
        return ""  # not enough matches found
    return match[index].strip()


def xml_tags(tag: str, text: str, suffix: str="") -> list[str]:
    """Extract list of content enclosed by XML tags."""
    if suffix:
        suffix = f" {suffix.strip()}"
    regex = re.compile(rf'(?<=<{tag}{suffix}>)(.*?)(?=</{tag}>)',
                       flags=re.DOTALL|re.MULTILINE)
    matched = re.findall(regex, text)
    if not matched:
        blanks = text.split("\n")[-1].split("<")[0]
        msg = f"Could not extract {tag!r} from:\n{blanks}{text}\n"
        msg += f"using regex: {regex}"
        _logger.error(msg)
        return []
    return matched
