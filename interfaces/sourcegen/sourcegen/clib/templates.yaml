# Definitions used for Jinja template replacement.

# This file is part of Cantera. See License.txt in the top-level directory or
# at https://cantera.org/license.txt for license and copyright information.

clib-param: |-
  @param{{ '[' + par.direction + ']' if par.direction }} {{ par.name }}

clib-comment: |-
  {{ brief }}

  {% for par in params %}
  {{ par }}
  {% endfor %}
  {% if returns %}
  {{ '@returns' + 12*' ' + returns }}
  {% endif %}
  {% if params or returns %}

  {% endif %}
  {% if implements %}
  {{ '@implements ' + implements }}
  {% endif %}
  {% if relates %}
  {{ '@relates ' + ', '.join(relates) }}
  {% endif %}

clib-definition: |-
  {{ annotations }}
  {{ declaration }};

clib-reserved-parentHandle-h: |-
  /**
   *  Return handle to parent of {{ base }} object.
   *  @param handle        Handle to queried {{ base }} object.
   *  @returns             Parent handle or -1 for exception handling.
   */
  int {{ prefix }}_parentHandle(int handle);

clib-reserved-cabinetSize-h: |-
  /**
   *  Return size of {{ base }} storage.
   *  @returns             Size or -1 for exception handling.
   */
  int {{ prefix }}_cabinetSize();

clib-reserved-getCanteraError-h: |-
  /**
   *  Get %Cantera error.
   *  @param[in] bufLen   Length of reserved array.
   *  @param[out] buf     String containing %Cantera error.
   *  @returns            Actual length of string or -1 for exception handling.
   */
  int {{ prefix }}_getCanteraError(int bufLen, char* buf);

clib-reserved-resetStorage-h: |-
  /**
   *  Delete all objects and erase mapping.
   *  @returns             Zero if successful or -1 for exception handling.
   */
  int {{ prefix }}_resetStorage();

clib-reserved-clearStorage-h: |-
  /**
   *  Delete all objects with mapping preserved.
   *  @returns             Zero if successful or -1 for exception handling.
   */
  int {{ prefix }}_clearStorage();

clib-header-file: |-
  /**
   *  {{ name.upper() }} - Experimental CLib %Cantera interface library.
   *
   *  @file {{ name }}.cpp
   *
   {% if docstring %}
   {% for line in docstring %}
   *  {{ line }}
   {% endfor %}
   *
   {% endif %}
   *  This library of functions is designed to encapsulate %Cantera functionality
   *  and make it available for use in languages and applications other than C++.
   *  A set of library functions is provided that are declared "extern C". All
   *  %Cantera objects are stored and referenced by integers - no pointers are
   *  passed to or from the calling application.
   *
   *  This file was generated by sourcegen. It will be re-generated by the
   *  %Cantera build process. Do not manually edit.
   *
   *  @warning  This module is an experimental part of the %Cantera API and
   *      may be changed or removed without notice.
   */

  // This file is part of Cantera. See License.txt in the top-level directory or
  // at https://cantera.org/license.txt for license and copyright information.

  #ifndef {{ guard }}
  #define {{ guard }}

  #ifdef __cplusplus
  extern "C" {
  #endif

      {{ declarations | indent(4) }}

  #ifdef __cplusplus
  }
  #endif

  #endif // {{ guard }}

clib-function: |-
  // function: {{ cxx_implements }}
  try {
      {% for line in lines %}
      {{ line }}
      {% endfor %}
      {% if buffer %}
      {% if buffer[0] %}
      {{ buffer[0] }} = {{ cxx_name }}({{ ', '.join(cxx_args) }});
      {% else %}
      {{ cxx_name }}({{ ', '.join(cxx_args) }});
      {% endif %}
      {% if buffer[1] %}
      {{ buffer[1] }}
      {% endif %}
      return {{ buffer[2] }};
      {% else %}
      return {{ cxx_name }}({{ ', '.join(cxx_args) }});
      {% endif %}
  } catch (...) {
      return handleAllExceptions({{ error[0] }}, {{ error[1] }});
  }

clib-constructor: |-
  // constructor: {{ cxx_implements }}
  try {
      {% for line in lines %}
      {{ line }}
      {% endfor %}
      {% if handle and checks %}
      if ({{ c_args[1] }} < 0 || {{ c_args[1] }} >= {{ base }}Cabinet::at({{ handle }})->{{ checks[0] }}()) {
          throw IndexError("{{ c_func }}", "", {{ c_args[1] }}, {{ base }}Cabinet::at({{ handle }})->{{ checks[0] }}() - 1);
      }
      {% else %}
      // no size checking specified
      {% endif %}
      {% if shared %}
      {% if handle %}
      auto obj = {{ base }}Cabinet::at({{ handle }})->{{ cxx_name }}({{ ', '.join(cxx_args) }});
      {% else %}
      auto obj = {{ cxx_name }}({{ ', '.join(cxx_args) }});
      {% endif %}
      int id = {{ base }}Cabinet::add(obj);
      // add all associated objects
      {% for typ, getter in shared %}
      if (obj->{{ getter }}()) {
          {{ typ }}Cabinet::add(obj->{{ getter }}(), id);
      }
      {% endfor %}
      return id;
      {% else %}
      {% if handle %}
      return {{ base }}Cabinet::add({{ base }}Cabinet::at({{ handle }})->{{ cxx_name }}({{ ', '.join(cxx_args) }}));
      {% else %}
      return {{ base }}Cabinet::add({{ cxx_name }}({{ ', '.join(cxx_args) }}));
      {% endif %}
      {% endif %}
  } catch (...) {
      return handleAllExceptions({{ error[0] }}, {{ error[1] }});
  }

clib-destructor: |-
  // destructor
  try {
      {% if shared %}
      auto obj = {{ base }}Cabinet::at({{ handle }});
      // remove all associated objects in reversed order
      {% for typ, getter in shared[-1::-1] %}
      if (obj->{{ getter }}()) {
          int index = {{ typ }}Cabinet::index(*(obj->{{ getter }}()), {{ handle }});
          if (index >= 0) {
              {{ typ }}Cabinet::del(index);
          }
      }
      {% endfor %}
      {% endif %}
      {{ base }}Cabinet::del({{ handle }});
      return 0;
  } catch (...) {
      return handleAllExceptions(-1, ERR);
  }

clib-method: |-
  // {{ what }}: {{ cxx_implements }}
  try {
      {% for line in lines %}
      {{ line }}
      {% endfor %}
      {% if buffer %}
      {% if buffer[0] %}
      {% if cxx_base == base %}
      {{ buffer[0] }} = {{ base }}Cabinet::at({{ handle }})->{{ cxx_name }}({{ ', '.join(cxx_args) }});
      {% else %}
      {{ buffer[0] }} = {{ base }}Cabinet::as<{{ cxx_base }}>({{ handle }})->{{ cxx_name }}({{ ', '.join(cxx_args) }});
      {% endif %}
      {% else %}
      {% if cxx_base == base %}
      {{ base }}Cabinet::at({{ handle }})->{{ cxx_name }}({{ ', '.join(cxx_args) }});
      {% else %}
      {{ base }}Cabinet::as<{{ cxx_base }}>({{ handle }})->{{ cxx_name }}({{ ', '.join(cxx_args) }});
      {% endif %}
      {% endif %}
      {% if buffer[1] %}
      {{ buffer[1] }}
      {% endif %}
      return {{ buffer[2] }};
      {% else %}
      {% if cxx_base == base %}
      return {{ base }}Cabinet::at({{ handle }})->{{ cxx_name }}({{ ', '.join(cxx_args) }});
      {% else %}
      return {{ base }}Cabinet::as<{{ cxx_base }}>({{ handle }})->{{ cxx_name }}({{ ', '.join(cxx_args) }});
      {% endif %}
      {% endif %}
  } catch (...) {
      return handleAllExceptions({{ error[0] }}, {{ error[1] }});
  }

clib-array-getter: |-
  // getter: {{ cxx_implements }}
  try {
      {% if cxx_base == base %}
      auto& obj = {{ base }}Cabinet::at({{ handle }});
      {% else %}
      auto obj = {{ base }}Cabinet::as<{{ cxx_base }}>({{ handle }});
      {% endif %}
      {% if checks %}
      if ({{ c_args[1] }} < obj->{{ checks[0] }}()) {
          throw ArraySizeError("{{ c_func }}", {{ c_args[1] }}, obj->{{ checks[0] }}());
      }
      {% else %}
      // no size checking specified
      {% endif %}
      {% if buffer and buffer[0] %}
      {{ buffer[0] }} = obj->{{ cxx_name }}({{ cxx_args[0] }});;
      {% if buffer[1] %}
      {{ buffer[1] }}
      {% endif %}
      return {{ buffer[2] }};
      {% else %}
      obj->{{ cxx_name }}({{ cxx_args[0] }});
      return 0;
      {% endif %}
  } catch (...) {
      return handleAllExceptions(-1, ERR);
  }

clib-array-setter: |-
  // setter: {{ cxx_implements }}
  try {
      {% if cxx_base == base %}
      auto& obj = {{ base }}Cabinet::at({{ handle }});
      {% else %}
      auto obj = {{ base }}Cabinet::as<{{ cxx_base }}>({{ handle }});
      {% endif %}
      {% if checks %}
      if ({{ c_args[1] }} != obj->{{ checks[0] }}()) {
          throw ArraySizeError("{{ c_func }}", {{ c_args[1] }}, obj->{{ checks[0] }}());
      }
      {% else %}
      // no size checking specified
      {% endif %}
      obj->{{ cxx_name }}({{ cxx_args[0] }});
      return 0;
  } catch (...) {
      return handleAllExceptions(-1, ERR);
  }

clib-noop: |-
  // no-op
  return 0;

clib-custom-code: |-
  // {{ what }}: {{ cxx_implements }}
  // ********** custom code begin **********
  {% for line in lines %}
  {{ line }}
  {% endfor %}
  // *********** custom code end ***********

clib-implementation: |-
  {{ declaration }}
  {
      {{ body | indent(4) }}
  }

clib-reserved-parentHandle-cpp: |-
  // reserved: {{ base }} cabinet parent
  try {
      return {{ base }}Cabinet::parent(handle);
  } catch (...) {
      return handleAllExceptions(-2, ERR);
  }

clib-reserved-cabinetSize-cpp: |-
  // reserved: int Cabinet<{{ base }}>.size()
  try {
      return {{ base }}Cabinet::size();
  } catch (...) {
      return handleAllExceptions(-1, ERR);
  }

clib-reserved-getCanteraError-cpp: |-
  // reserved: string Application::Instance()->lastErrorMessage();
  try {
      string err = Application::Instance()->lastErrorMessage();
      copyString(err, buf, bufLen);
      return int(err.size());
  } catch (...) {
      return handleAllExceptions(-1, ERR);
  }

clib-reserved-resetStorage-cpp: |-
  // reserved: void Cabinet<T>::reset()
  try {
      {% for base in cabinets %}
      {{ base }}Cabinet::reset();
      {% endfor %}
      return 0;
  } catch (...) {
      return handleAllExceptions(-1, ERR);
  }

clib-reserved-clearStorage-cpp: |-
  // reserved: void Cabinet<T>::clear()
  try {
      {% for base in cabinets %}
      {{ base }}Cabinet::clear();
      {% endfor %}
      return 0;
  } catch (...) {
      return handleAllExceptions(-1, ERR);
  }

clib-source-file: |-
  /**
   *  {{ name.upper() }} - Experimental CLib %Cantera interface library.
   *
   *  @file {{ name }}.cpp
   *
   {% if docstring %}
   {% for line in docstring %}
   *  {{ line }}
   {% endfor %}
   *
   {% endif %}
   *  This file was generated by sourcegen. It will be re-generated by the
   *  %Cantera build process. Do not manually edit.
   *
   *  @warning  This module is an experimental part of the %Cantera API and
   *      may be changed or removed without notice.
   */

  // This file is part of Cantera. See License.txt in the top-level directory or
  // at https://cantera.org/license.txt for license and copyright information.

  #include "cantera/clib_experimental/{{ name }}.h"
  #include "../clib/clib_utils.h"

  {% if str_utils %}
  #include "cantera/base/stringUtils.h"
  {% endif %}
  {% for entry in includes %}
  #include "{{ entry }}"
  {% endfor %}

  using namespace Cantera;

  {% if base %}
  // Define Cabinet<{{ base }}> (single-instance object)
  typedef Cabinet<{{ base }}> {{ base }}Cabinet;
  // Note: cabinet is already created by the traditional CLib interface
  // template<> {{ base }}Cabinet* {{ base }}Cabinet::s_storage = 0; // initialized here
  template<> {{ base }}Cabinet* {{ base }}Cabinet::s_storage; // temporary

  {% endif %}
  {% if other %}
  {% for entry in other %}
  typedef Cabinet<{{ entry }}> {{ entry }}Cabinet;
  template<> {{ entry }}Cabinet* {{ entry }}Cabinet::s_storage; // initialized elsewhere

  {% endfor %}
  {% endif %}
  extern "C" {

      {{ implementations | indent(4) }}

  } // extern "C"
