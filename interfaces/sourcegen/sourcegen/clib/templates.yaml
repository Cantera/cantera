# Definitions used for Jinja template replacement.

# This file is part of Cantera. See License.txt in the top-level directory or
# at https://cantera.org/license.txt for license and copyright information.

clib-param: |-
  @param{{ '[' + par.direction + ']' if par.direction }} {{ par.name }}

clib-comment: |-
  {{ briefdescription }}

  {% for par in params -%}
  {{ par }}
  {% endfor -%}
  {% if returns -%}
  {{ '@returns' + 13*' ' + returns }}
  {% endif -%}
  {{ ' ' }}
  {% if implements -%}
  {{ '@implements ' + implements }}
  {% endif -%}
  {% if relates -%}
  {{ '@relates ' + ', '.join(relates) }}
  {% endif %}

clib-definition: |-
  {{ annotations }}
  {{ declaration }};

clib-header-file: |-
  /**
   * {{ name.upper() }} - Experimental CLib %Cantera interface library.
   *
   * @file {{ name }}.cpp
   *
   * This library of functions is designed to encapsulate %Cantera functionality
   * and make it available for use in languages and applications other than C++.
   * A set of library functions is provided that are declared "extern C". All
   * %Cantera objects are stored and referenced by integers - no pointers are
   * passed to or from the calling application.
   *
   * This file was generated by sourcegen. It will be re-generated by the
   * %Cantera build process. Do not manually edit.
   *
   * @warning  This module is an experimental part of the %Cantera API and
   *      may be changed or removed without notice.
   */

  // This file is part of Cantera. See License.txt in the top-level directory or
  // at https://cantera.org/license.txt for license and copyright information.

  #ifndef {{ guard }}
  #define {{ guard }}

  #ifdef __cplusplus
  extern "C" {
  #endif
      {% for header_entry in header_entries %}
      {{ header_entry | indent(4) }}
      {% endfor %}
  #ifdef __cplusplus
  }
  #endif

  #endif // {{ guard }}

clib-int-getter: |-
  try {
      // getter: {{ cxx_implements }}
      return {{ base }}Cabinet::at({{ c_arg[0] }})->{{ cxx_name }}();
  } catch (...) {
      return handleAllExceptions(ERR, ERR);
  }

clib-double-getter: |-
  try {
      // getter: {{ cxx_implements }}
      return {{ base }}Cabinet::at({{ c_arg[0] }})->{{ cxx_name }}();
  } catch (...) {
      return handleAllExceptions(DERR, DERR);
  }

clib-string-getter: |-
  try {
      // getter: {{ cxx_implements }}
      auto out = {{ cxx_base }}Cabinet::at({{ c_arg[0] }})->{{ cxx_name }}();
      copyString(out, {{ c_arg[2] }}, {{ c_arg[1] }});
      return int(out.size());
  } catch (...) {
      return handleAllExceptions(-1, ERR);
  }

clib-array-getter: |-
  try {
      // getter: {{ cxx_implements }}
      auto& obj = {{ cxx_base }}Cabinet::at({{ c_arg[0] }});
      {% if size_fcn -%}
      if ({{ c_arg[1] }} != obj->{{ size_fcn }}) {
          throw CanteraError("{{ c_func }}",
              "Invalid output array size; expected size {} but received {}.",
              obj->{{ size_fcn }}, {{ c_arg[1] }});
      }
      {% else %}
      // no size checking specified
      {% endif -%}
      obj->{{ cxx_name }}({{ c_arg[2] }});
      return 0;
  } catch (...) {
      return handleAllExceptions(-1, ERR);
  }

clib-object-getter: |-
  try {
      // getter: {{ cxx_implements }}
      auto& obj = {{ cxx_base }}Cabinet::at({{ c_arg[0] }});
      return {{ obj_base }}Cabinet::index(obj->{{ cxx_name }}(), {{ c_arg[0] }});
  } catch (...) {
      return handleAllExceptions(-2, ERR);
  }

clib-simple-setter: |-
  try {
      // setter: {{ cxx_implements }}
      {{ cxx_base }}Cabinet::at({{ c_arg[0] }})->{{ cxx_name }}({{ c_arg[1] }});
      return 0;
  } catch (...) {
      return handleAllExceptions(-1, ERR);
  }

clib-array-setter: |-
  try {
      // setter: {{ cxx_implements }}
      auto& obj = {{ cxx_base }}Cabinet::at({{ c_arg[0] }});
      {% if size_fcn -%}
      if ({{ c_arg[1] }} != obj->{{ size_fcn }}) {
          throw CanteraError("{{ c_func }}",
              "Invalid input array size; expected size {} but received {}.",
              obj->{{ size_fcn }}, {{ c_arg[1] }});
      }
      {% else %}
      // no size checking specified
      {% endif -%}
      obj->{{ cxx_name }}({{ c_arg[2] }});
      return 0;
  } catch (...) {
      return handleAllExceptions(-1, ERR);
  }

clib-object-setter: |-
  try {
      // setter: {{ cxx_implements }}
      {{ cxx_base }}Cabinet::at({{ c_arg[0] }})->{{ cxx_name }}({{ obj_base }}Cabinet::at({{ c_arg[1] }}));
      return 0;
  } catch (...) {
      return handleAllExceptions(-2, ERR);
  }

clib-destructor: |-
  try {
      // destructor
      {{ cxx_base }}Cabinet::del({{ c_arg[0] }});
      return 0;
  } catch (...) {
      return handleAllExceptions(-1, ERR);
  }

clib-noop: |-
  // no-op
  return 0;

clib-implementation: |-
  {{ declaration }}
  {
      {{ body | indent(4) }}
  }

clib-source-file: |-
  /**
   * {{ name.upper() }} - Experimental CLib %Cantera interface library.
   *
   * @file {{ name }}.cpp
   *
   * This file was generated by sourcegen. It will be re-generated by the
   * %Cantera build process. Do not manually edit.
   *
   * @warning  This module is an experimental part of the %Cantera API and
   *      may be changed or removed without notice.
   */

  // This file is part of Cantera. See License.txt in the top-level directory or
  // at https://cantera.org/license.txt for license and copyright information.

  #include "../include/clib3_defs.h"
  #include "../include/{{ name }}.h"

  using namespace Cantera;

  extern "C" {
      {% for source_entry in source_entries %}
      {{ source_entry | indent(4) }}
      {% endfor %}
  }
