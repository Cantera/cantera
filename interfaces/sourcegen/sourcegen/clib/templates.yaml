# Definitions used for Jinja template replacement.

# This file is part of Cantera. See License.txt in the top-level directory or
# at https://cantera.org/license.txt for license and copyright information.

clib-param: |-
  @param{{ '[' + par.direction + ']' if par.direction }} {{ par.name }}

clib-comment: |-
  {{ briefdescription }}

  {% for par in params %}
  {{ par }}
  {% endfor %}
  {% if returns %}
  {{ '@returns' + 13*' ' + returns }}
  {% endif %}
  {% if params or returns %}

  {% endif %}
  {% if implements %}
  {{ '@implements ' + implements }}
  {% endif %}
  {% if relates %}
  {{ '@relates ' + ', '.join(relates) }}
  {% endif %}

clib-definition: |-
  {{ annotations }}
  {{ declaration }};

clib-header-file: |-
  /**
   * {{ name.upper() }} - Experimental CLib %Cantera interface library.
   *
   * @file {{ name }}.cpp
   *
   * This library of functions is designed to encapsulate %Cantera functionality
   * and make it available for use in languages and applications other than C++.
   * A set of library functions is provided that are declared "extern C". All
   * %Cantera objects are stored and referenced by integers - no pointers are
   * passed to or from the calling application.
   *
   * This file was generated by sourcegen. It will be re-generated by the
   * %Cantera build process. Do not manually edit.
   *
   * @warning  This module is an experimental part of the %Cantera API and
   *      may be changed or removed without notice.
   */

  // This file is part of Cantera. See License.txt in the top-level directory or
  // at https://cantera.org/license.txt for license and copyright information.

  #ifndef {{ guard }}
  #define {{ guard }}

  #ifdef __cplusplus
  extern "C" {
  #endif

      {{ headers | indent(4) }}

      {% if base %}
      {% if no_constructor %}
      /**
       * Return handle to parent of {{ base }} object (if applicable).
       */
      int {{ prefix }}_parentHandle(int handle);

      {% endif %}
      /**
       * Return size of {{ base }} storage.
       */
      int {{ prefix }}_cabinetSize();

      {% endif %}
  #ifdef __cplusplus
  }
  #endif

  #endif // {{ guard }}

clib-function: |-
  // function: {{ cxx_implements }}
  try {
      {% for line in lines %}
      {{ line }}
      {% endfor %}
      {% if buffer %}
      {% if buffer[0] %}
      {{ buffer[0] }} = {{ cxx_name }}({{ ', '.join(cxx_args) }});
      {% else %}
      {{ cxx_name }}({{ ', '.join(cxx_args) }});
      {% endif %}
      {% if buffer[1] %}
      {{ buffer[1] }}
      {% endif %}
      return {{ buffer[2] }};
      {% else %}
      return {{ cxx_name }}({{ ', '.join(cxx_args) }});
      {% endif %}
  } catch (...) {
      return handleAllExceptions({{ error[0] }}, {{ error[1] }});
  }

clib-constructor: |-
  // constructor: {{ cxx_implements }}
  try {
      {% for line in lines %}
      {{ line }}
      {% endfor %}
      {% if uses %}
      {% if handle %}
      auto obj = {{ cxx_base }}Cabinet3::at({{ handle }})->{{ cxx_name }}({{ ', '.join(cxx_args) }});
      {% else %}
      auto obj = {{ cxx_name }}({{ ', '.join(cxx_args) }});
      {% endif %}
      int id = {{ cxx_base }}Cabinet3::add(obj);
      // add all associated objects
      {% for typ, getter in uses %}
      if (obj->{{ getter }}()) {
          {{ typ }}Cabinet3::add(obj->{{ getter }}(), id);
      }
      {% endfor %}
      return id;
      {% else %}
      {% if handle %}
      return {{ cxx_base }}Cabinet3::add({{ cxx_base }}Cabinet3::at({{ handle }})->{{ cxx_name }}({{ ', '.join(cxx_args) }}));
      {% else %}
      return {{ cxx_base }}Cabinet3::add({{ cxx_name }}({{ ', '.join(cxx_args) }}));
      {% endif %}
      {% endif %}
  } catch (...) {
      return handleAllExceptions({{ error[0] }}, {{ error[1] }});
  }

clib-destructor: |-
  // destructor
  try {
      {% if uses %}
      auto obj = {{ cxx_base }}Cabinet3::at({{ handle }});
      // remove all associated objects in reversed order
      {% for typ, getter in uses[-1::-1] %}
      if (obj->{{ getter }}()) {
          int index = {{ typ }}Cabinet3::index(*(obj->{{ getter }}()), {{ handle }});
          if (index >= 0) {
              {{ typ }}Cabinet3::del(index);
          }
      }
      {% endfor %}
      {% endif %}
      {{ cxx_base }}Cabinet3::del({{ handle }});
      return 0;
  } catch (...) {
      return handleAllExceptions(-1, ERR);
  }

clib-method: |-
  // {{ what }}: {{ cxx_implements }}
  try {
      {% for line in lines %}
      {{ line }}
      {% endfor %}
      {% if buffer %}
      {% if buffer[0] %}
      {{ buffer[0] }} = {{ cxx_base }}Cabinet3::at({{ handle }})->{{ cxx_name }}({{ ', '.join(cxx_args) }});
      {% else %}
      {{ cxx_base }}Cabinet3::at({{ handle }})->{{ cxx_name }}({{ ', '.join(cxx_args) }});
      {% endif %}
      {% if buffer[1] %}
      {{ buffer[1] }}
      {% endif %}
      return {{ buffer[2] }};
      {% else %}
      return {{ cxx_base }}Cabinet3::at({{ handle }})->{{ cxx_name }}({{ ', '.join(cxx_args) }});
      {% endif %}
  } catch (...) {
      return handleAllExceptions({{ error[0] }}, {{ error[1] }});
  }

clib-array-getter: |-
  // getter: {{ cxx_implements }}
  try {
      auto& obj = {{ cxx_base }}Cabinet3::at({{ handle }});
      {% if uses %}
      if ({{ c_args[1] }} < obj->{{ uses[0][1] }}()) {
          throw CanteraError("{{ c_func }}",
              "Invalid output array size; expected minimum size {} but received {}.",
              obj->{{ uses[0][1] }}(), {{ c_args[1] }});
      }
      {% else %}
      // no size checking specified
      {% endif %}
      obj->{{ cxx_name }}({{ cxx_args[0] }});
      return 0;
  } catch (...) {
      return handleAllExceptions(-1, ERR);
  }

clib-array-setter: |-
  // setter: {{ cxx_implements }}
  try {
      auto& obj = {{ cxx_base }}Cabinet3::at({{ handle }});
      {% if uses %}
      if ({{ c_args[1] }} != obj->{{ uses[0][1] }}()) {
          throw CanteraError("{{ c_func }}",
              "Invalid input array size; expected size {} but received {}.",
              obj->{{ uses[0][1] }}(), {{ c_args[1] }});
      }
      {% else %}
      // no size checking specified
      {% endif %}
      obj->{{ cxx_name }}({{ cxx_args[0] }});
      return 0;
  } catch (...) {
      return handleAllExceptions(-1, ERR);
  }

clib-noop: |-
  // no-op
  return 0;

clib-implementation: |-
  {{ declaration }}
  {
      {{ body | indent(4) }}
  }

clib-source-file: |-
  /**
   * {{ name.upper() }} - Experimental CLib %Cantera interface library.
   *
   * @file {{ name }}.cpp
   *
   * This file was generated by sourcegen. It will be re-generated by the
   * %Cantera build process. Do not manually edit.
   *
   * @warning  This module is an experimental part of the %Cantera API and
   *      may be changed or removed without notice.
   */

  // This file is part of Cantera. See License.txt in the top-level directory or
  // at https://cantera.org/license.txt for license and copyright information.

  #include "cantera/clib_experimental/{{ name }}.h"
  #include "cantera/clib_experimental/clib3_defs.h"
  #include "../clib/Cabinet.h"

  {% if str_utils %}
  #include "cantera/base/stringUtils.h"
  {% endif %}
  {% for entry in includes %}
  #include "{{ entry }}"
  {% endfor %}

  using namespace Cantera;

  {% if base %}
  typedef Cabinet<{{ base }}> {{ base }}Cabinet3;
  template<> {{ base }}Cabinet3* {{ base }}Cabinet3::s_storage = 0;
  {% endif %}
  {% if other %}

  {% for entry in other %}
  typedef Cabinet<{{ entry }}> {{ entry }}Cabinet3; // initialized elsewhere
  {% endfor %}
  {% endif %}

  extern "C" {

      {{ implementations | indent(4) }}

      {% if base %}
      {% if no_constructor %}
      int {{ prefix }}_parentHandle(int handle)
      {
          // cabinet parent
          try {
              return {{ base }}Cabinet3::parent(handle);
          } catch (...) {
              return handleAllExceptions(-2, ERR);
          }
      }

      {% endif %}
      int {{ prefix }}_cabinetSize()
      {
          // cabinet size
          try {
              return {{ base }}Cabinet3::size();
          } catch (...) {
              return handleAllExceptions(-1, ERR);
          }
      }

      {% endif %}
  } // extern "C"
