function ctEditLibraryDefinitions(fileDir)
    % Post-process auto-generated library definition file.
    % ctEditLibraryDefinitions edits the autogenerated`definectMatlab.m` file
    % created by MATLAB's C++ interface generator to handle edge cases
    % in array argument definitions.
    %
    % This function adjusts array "shape" placeholders (<SHAPE>) and removes
    % placeholder direction tokens (<DIRECTION>) left behind by the automatic
    % interface generation process. It also cleans up commented-out lines and
    % trailing inline comments so that the resulting file can be compiled as
    % part of the Cantera MATLAB interface.

    fname = fileDir + "/definectMatlab.m";
    % Read original file
    lines = string(readlines(fname));

    % Find block boundaries
    blockStartIdx = find(startsWith(lines, "%% "));
    blockEndIdx = [blockStartIdx(2:end) - 1; numel(lines)];

    % Process each block
    for i = 2:numel(blockStartIdx)
        blockLines = lines(blockStartIdx(i):blockEndIdx(i));

        if any(contains(blockLines, '<DIRECTION>'))
            continue
        end

        if any(contains(blockLines, '<SHAPE>'))
            for j = 3:numel(blockLines)
                if contains(blockLines(j), '<SHAPE>')
                    % Use name of preceding scalar variable
                    tokens = regexp(blockLines(j-1), '"(\w+)"', 'tokens', 'once');
                    if ~isempty(tokens)
                        shape = ['"' tokens{1} '"'];
                    else
                        shape = '1';
                    end
                    % Replace <SHAPE> with determined value
                    blockLines(j) = replace(blockLines(j), '<SHAPE>', shape);
                end
            end
        end

        % Uncomment and clean up trailing comments
        for j = 3:numel(blockLines)
            line = strtrim(blockLines(j));
            if startsWith(line, "%")
                line = extractAfter(line, 1);
            end
            pctIdx = strfind(line, '%');
            if ~isempty(pctIdx)
                lastPct = pctIdx(end);
                line = strtrim(extractBefore(line, lastPct));
            end
            blockLines(j) = line;
        end

        lines(blockStartIdx(i):blockEndIdx(i)) = blockLines;
    end

    % Write to libDef file
    writelines(lines, fname);
end
