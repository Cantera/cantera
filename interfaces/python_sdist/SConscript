"""SDist of the Python Module"""
from pathlib import Path
import re
import shutil
from textwrap import dedent

from build import ProjectBuilder
from build.env import DefaultIsolatedEnv

from buildutils import logger, multi_glob

Import("env")

localenv = env.Clone()

sdist_targets = []


def sdist(targets):
    sdist_targets.extend(targets)
    return targets


def replace_git_hash(target, source, env):
    # Avoid having to set a C preprocessor define at compile time, since
    # the git commit is unknown from the sdist
    target = Path(target[0].abspath)
    source = Path(source[0].abspath)
    git_commit_replaced = re.sub("#ifdef GIT_COMMIT.*?#endif",
                                 f"""    return "{env['git_commit']}";""",
                                 source.read_text(),
                                 flags=re.DOTALL)
    target.write_text(git_commit_replaced)


# Use RecursiveInstall to be able to exclude files and folders.
sdist(localenv.RecursiveInstall(
    "src",
    "#src",
    exclude=["fortran", "clib", "pch", r"global\.cpp", "SCons.*", r"canteraStatic\.cpp"],
))

sdist(localenv.Command("src/base/global.cpp", "#src/base/global.cpp",
                       replace_git_hash))
sdist(localenv.Command("include/cantera/cython/utils_utils.h", "#include/cantera/cython/utils_utils.h",
                       replace_git_hash))

# This is the only bit of the clib that we need for the Python interface
clib_defs_target = sdist(localenv.Command(
    "include/cantera/clib/clib_defs.h",
    "#include/cantera/clib/clib_defs.h",
    Copy("$TARGET", "$SOURCE")
))

# The clib is handled by clib_defs_target. The include/cantera/ext folder is handled by
# ext_include_target. config.h needs to be filled on the user's machine by CMake.
include_target = sdist(localenv.RecursiveInstall(
    "include",
    "#include",
    exclude=[
        "clib$",
        "ext$",
        r"config\.h$",
        r"utils_utils\.h",
    ],
))
localenv.Depends(clib_defs_target, include_target)

sdist(localenv.UnitsInterfaceBuilder(
    "cantera/with_units/solution.py",
    "#interfaces/cython/cantera/with_units/solution.py.in",
))
# Use RecursiveInstall to make sure that files are not overwritten during the copy.
# A normal Copy Action would fail because of the existing directories.
sdist(localenv.RecursiveInstall("cantera",
                                "#interfaces/cython/cantera",
                                exclude=["__pycache__"]))
sdist(localenv.RecursiveInstall("cantera/data",
                                "#data"))

if localenv["example_data"]:
    for yaml in multi_glob(localenv, "#data/example_data", "yaml"):
        sdist(localenv.Command(f"cantera/data/example_data/{yaml.name}", yaml.abspath,
                               Copy("$TARGET", "$SOURCE")))
    # Add example_data directory to setup.cfg
    localenv["cfg_example_data"] = "cantera.data.example_data"
    localenv["cfg_example_data_options"] = "cantera.data.example_data = *.*"
else:
    localenv["cfg_example_data"] = ""
    localenv["cfg_example_data_options"] = ""

# Copy the minimal Sundials configuration template into the sdist so that
# it can be filled in at compile time on the user's machine
# sdist(localenv.Command("sundials_config.h.in", "#ext/sundials_config.h.in",
#                        Copy("$TARGET", "$SOURCE")))

# TODO: We're no longer distributing any of the ext code, so we don't need their
# license, maybe? I guess since we statically link we might need it?
license = sdist(localenv.Command("LICENSE.txt", "#build/ext/LICENSE.txt",
                                 Copy("$TARGET", "$SOURCE")))
localenv.Depends(license, localenv["license_target"])

sdist(localenv.SubstFile("pyproject.toml", "pyproject.toml.in"))
sdist(localenv.SubstFile("src/configure.py", "src/configure.py.in"))
for cmakelist in ("", "cantera", "src"):
    location = "/".join((cmakelist, "CMakeLists.txt")).removeprefix("/")
    sdist(localenv.Command(location, f"#interfaces/python_sdist/{location}", Copy("$TARGET", "$SOURCE")))
sdist(localenv.Command("README.rst", "#README.rst", Copy("$TARGET", "$SOURCE")))


def build_sdist(target, source, env):
    build_dir = Path(source[0].abspath).parent
    with DefaultIsolatedEnv() as build_env:
        builder = ProjectBuilder.from_isolated_env(env=build_env,
                                                   source_dir=str(build_dir))

        # first install the build dependencies
        build_env.install(builder.build_system_requires)
        # then get the extra required dependencies from the backend
        build_env.install(builder.get_requires_for_build("sdist", {}))
        builder.build("sdist", str(build_dir / "dist"), {})


def finish_sdist_message(target, source, env):
    sdist = Path(source[0].path).name
    message = dedent(f"""
        *******************************************************
        Python sdist '{sdist}' created successfully.
        The sdist file is in the 'build/python_sdist/dist'
        directory.
        *******************************************************
    """)
    logger.info(message, print_level=False)


sdist_target = f"dist/Cantera-{env['cantera_version']}.tar.gz"
built_sdist_target = localenv.Command(sdist_target, ("pyproject.toml",), build_sdist)
finish_sdist = localenv.Command("finish_sdist", sdist_target, finish_sdist_message)
localenv.Depends(built_sdist_target, sdist_targets)
env.Alias("sdist", finish_sdist)
