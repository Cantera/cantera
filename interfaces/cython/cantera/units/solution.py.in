from .. import Solution as _Solution, PureFluid as _PureFluid, CanteraError

from pint import UnitRegistry
units = UnitRegistry()
Q_ = units.Quantity

__all__ = ("units", "Q_", "Solution", "PureFluid", "Heptane", "CarbonDioxide",
           "Hfc134a", "Hydrogen", "Methane", "Nitrogen", "Oxygen", "Water",
           "CanteraError")


class Solution:
    def __init__(self, infile, name=""):
        self.__dict__["_phase"] = _Solution(infile, name)

    @common_properties@

    @thermophase_properties@



class PureFluid:
    def __init__(self, infile, name=""):
        self.__dict__["_phase"] = _PureFluid(infile, name)

    @common_properties@

    @property
    def Q(self):
        Q = self._phase.Q
        return Q_(Q, "dimensionless")

    @Q.setter
    def Q(self, value):
        if value is not None:
            try:
                Q = value.to("dimensionless").magnitude
            except AttributeError:
                raise CanteraError(
                    "Values must be instances of pint.Quantity classes"
                ) from None
        else:
            Q = self.Q.magnitude
        self._phase.Q = Q

    @thermophase_properties@

    @property
    def TPQ(self):
        T, P, Q = self._phase.TPQ
        return Q_(T, "K"), Q_(P, "Pa"), Q_(Q, "dimensionless")

    @TPQ.setter
    def TPQ(self, value):
        T = value[0] if value[0] is not None else self.T
        P = value[1] if value[1] is not None else self.P
        Q = value[2] if value[2] is not None else self.Q
        try:
            T = T.to("K")
            P = P.to("Pa")
            Q = Q.to("dimensionless")
        except AttributeError:
            raise CanteraError(
                "Values must be instances of pint.Quantity classes"
            ) from None
        self._phase.TPQ = T.magnitude, P.magnitude, Q.magnitude

    @purefluid_properties@


def Heptane():
    return PureFluid("liquidvapor.yaml", "heptane")


def CarbonDioxide():
    return PureFluid("liquidvapor.yaml", "carbon-dioxide")


def Hfc134a():
    return PureFluid("liquidvapor.yaml", "hfc134a")


def Hydrogen():
    return PureFluid("liquidvapor.yaml", "hydrogen")


def Methane():
    return PureFluid("liquidvapor.yaml", "methane")


def Nitrogen():
    return PureFluid("liquidvapor.yaml", "nitrogen")


def Oxygen():
    return PureFluid("liquidvapor.yaml", "oxygen")


def Water():
    return PureFluid("liquidvapor.yaml", "water")
