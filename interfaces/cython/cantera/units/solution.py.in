from .. import Solution as _Solution, PureFluid as _PureFluid

from pint import UnitRegistry
units = UnitRegistry()
Q_ = units.Quantity

__all__ = (
    "units", "Q_", "Solution", "PureFluid", "Heptane", "CarbonDioxide",
    "Hfc134a", "Hydrogen", "Methane", "Nitrogen", "Oxygen", "Water")


class Solution:
    def __init__(self, infile, phasename=""):
        self._phase = _Solution(infile, phasename)

    @property
    def basis_units(self):
        if self._phase.basis == "mass":
            return "kg"
        else:
            return "kmol"

    def __getattr__(self, name):
        return getattr(self._phase, name)

    def __setattr__(self, name, value):
        return super(Solution, self).__setattr__(name, value)

    @property
    def X(self):
        X = self._phase.X
        return Q_(X, "dimensionless")

    @X.setter
    def X(self, value):
        if value is not None:
            try:
                X = value.to("dimensionless").magnitude
            except AttributeError:
                X = value
        else:
            X = self.X.magnitude
        self._phase.X = X

    @property
    def Y(self):
        Y = self._phase.Y
        return Q_(Y, "dimensionless")

    @Y.setter
    def Y(self, value):
        if value is not None:
            try:
                Y = value.to("dimensionless").magnitude
            except AttributeError:
                Y = value
        else:
            Y = self.Y.magnitude
        self._phase.Y = Y

    @solution_properties@


class PureFluid(Solution):
    def __init__(self, infile, phasename=""):
        self._phase = _PureFluid(infile, phasename)

    @property
    def Q(self):
        Q = self._phase.Q
        return Q_(Q, "dimensionless")

    @Q.setter
    def Q(self, value):
        if value is not None:
            try:
                Q = value.to("dimensionless").magnitude
            except AttributeError:
                Q = value
        else:
            Q = self.Q.magnitude
        self._phase.Q = Q

    @purefluid_properties@


def Heptane():
    return PureFluid("liquidvapor.yaml", "heptane")


def CarbonDioxide():
    return PureFluid("liquidvapor.yaml", "carbon-dioxide")


def Hfc134a():
    return PureFluid("liquidvapor.yaml", "hfc134a")


def Hydrogen():
    return PureFluid("liquidvapor.yaml", "hydrogen")


def Methane():
    return PureFluid("liquidvapor.yaml", "methane")


def Nitrogen():
    return PureFluid("liquidvapor.yaml", "nitrogen")


def Oxygen():
    return PureFluid("liquidvapor.yaml", "oxygen")


def Water():
    return PureFluid("liquidvapor.yaml", "water")
