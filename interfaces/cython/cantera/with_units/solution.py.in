# This file is part of Cantera. See License.txt in the top-level directory or
# at https://cantera.org/license.txt for license and copyright information.

from .. import Solution as _Solution, PureFluid as _PureFluid, CanteraError
from pint import get_application_registry

units = get_application_registry()
Q_ = units.Quantity

__all__ = ("units", "Q_", "Solution", "PureFluid", "Heptane", "CarbonDioxide",
           "Hfc134a", "Hydrogen", "Methane", "Nitrogen", "Oxygen", "Water",
           "CanteraError")


class Solution:
    def __init__(self, infile, name=""):
        self.__dict__["_phase"] = _Solution(infile, name)

    @common_properties@

    @thermophase_properties@



class PureFluid:
    def __init__(self, infile, name="", **kwargs):
        self.__dict__["_phase"] = _PureFluid(infile, name, **kwargs)

    @common_properties@

    @property
    def Q(self):
        Q = self._phase.Q
        return Q_(Q, "dimensionless")

    @Q.setter
    def Q(self, value):
        if value is not None:
            try:
                Q = value.to("dimensionless").magnitude
            except AttributeError as e:
                if "'to'" in str(e):
                    raise CanteraError(
                        f"Value {value!r} must be an instance of a pint.Quantity class"
                    ) from None
                else:
                    raise  # pragma: no cover
        else:
            Q = self.Q.magnitude
        self._phase.Q = Q

    @thermophase_properties@

    @property
    def TPQ(self):
        T, P, Q = self._phase.TPQ
        return Q_(T, "K"), Q_(P, "Pa"), Q_(Q, "dimensionless")

    @TPQ.setter
    def TPQ(self, value):
        msg = "Value {value!r} must be an instance of a pint.Quantity class"
        T = value[0] if value[0] is not None else self.T
        P = value[1] if value[1] is not None else self.P
        Q = value[2] if value[2] is not None else self.Q
        for val, unit in ((T, "K"), (P, "Pa"), (Q, "dimensionless")):
            try:
                val.ito(unit)
            except AttributeError as e:
                if "'ito'" in str(e):
                    raise CanteraError(msg.format(value=val)) from None
                else:
                    raise  # pragma: no cover
        self._phase.TPQ = T.magnitude, P.magnitude, Q.magnitude

    @purefluid_properties@


def Heptane():
    return PureFluid("liquidvapor.yaml", "heptane")


def CarbonDioxide():
    return PureFluid("liquidvapor.yaml", "carbon-dioxide")


def Hfc134a():
    return PureFluid("liquidvapor.yaml", "HFC-134a")


def Hydrogen():
    return PureFluid("liquidvapor.yaml", "hydrogen")


def Methane():
    return PureFluid("liquidvapor.yaml", "methane")


def Nitrogen():
    return PureFluid("liquidvapor.yaml", "nitrogen")


def Oxygen():
    return PureFluid("liquidvapor.yaml", "oxygen")


def Water(backend="Reynolds"):
    return PureFluid("liquidvapor.yaml", "water", backend=backend)
