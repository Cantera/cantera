name: CI

on:
  push:
    # Build on tags that look like releases
    tags:
      - v*
    # Build when main or testing is pushed to
    branches:
      - main
      - testing
  pull_request:
    # Build when a pull request targets main
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ubuntu-multiple-pythons:
    name: ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        python-version: [ '3.7', '3.9', '3.10' ]
        os: ['ubuntu-18.04', 'ubuntu-20.04']
      fail-fast: false
    steps:
    - uses: actions/checkout@v2
      name: Checkout the repository
      with:
        submodules: recursive
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        architecture: x64
    - name: Install Apt dependencies
      run: |
        sudo apt update
        sudo apt install libboost-dev gfortran libopenmpi-dev
    - name: Upgrade pip
      run: python3 -m pip install -U pip setuptools wheel
    - name: Install Python dependencies
      run: python3 -m pip install ruamel.yaml scons numpy cython h5py pandas pytest
        pytest-github-actions-annotate-failures
    - name: Build Cantera
      run: python3 `which scons` build env_vars=all -j2 debug=n --debug=time
    - name: Test Cantera
      run:
        python3 `which scons` test show_long_tests=yes verbose_tests=yes --debug=time

  clang-compiler:
    name: LLVM/Clang with Python 3.8
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v2
      name: Checkout the repository
      with:
        submodules: recursive
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
        architecture: x64
    - name: Install Apt dependencies
      run: |
        sudo apt update
        sudo apt install libboost-dev gfortran libomp-dev libomp5
    - name: Upgrade pip
      run: python3 -m pip install -U pip setuptools wheel
    - name: Install Python dependencies
      run: python3 -m pip install ruamel.yaml scons numpy cython h5py pandas pytest
        pytest-github-actions-annotate-failures
    - name: Build Cantera
      run: python3 `which scons` build env_vars=all
        CXX=clang++-12 CC=clang-12 f90_interface=n extra_lib_dirs=/usr/lib/llvm/lib
        -j2 debug=n --debug=time
    - name: Test Cantera
      run:
        python3 `which scons` test show_long_tests=yes verbose_tests=yes --debug=time

  macos-multiple-pythons:
    name: macOS with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90
    strategy:
      matrix:
        python-version: [ '3.7', '3.9', '3.10' ]
        os: ['macos-10.15']
      fail-fast: false
    steps:
    # Attempt to fix intermittent cloning errors. The error message says something like
    # error: RPC failed; curl 18 transfer closed with outstanding read data remaining
    # The clone is already being done with --depth=1, so the next recommended fix is to
    # increase the buffer size. See also:
    # https://github.com/actions/virtual-environments/issues/2198
    # https://stackoverflow.com/q/38618885
    - name: Configure git
      run: /usr/local/bin/git config --global http.postBuffer 1048576000
    - uses: actions/checkout@v2
      name: Checkout the repository
      with:
        submodules: recursive
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        architecture: x64
    - name: Install Brew dependencies
      run: brew install boost libomp
    - name: Upgrade pip
      run: python3 -m pip install -U pip 'setuptools>=47.0.0,<48' wheel
    - name: Install Python dependencies
      run: python3 -m pip install ruamel.yaml scons numpy cython h5py pandas pytest
        pytest-github-actions-annotate-failures
    - name: Build Cantera
      run: python3 `which scons` build env_vars=all -j3 debug=n --debug=time
    - name: Test Cantera
      run:
        python3 `which scons` test show_long_tests=yes verbose_tests=yes --debug=time

  # Coverage is its own job because macOS builds of the samples
  # use Homebrew gfortran which is not compatible for coverage
  # with XCode clang. Also, turning off optimization really
  # slows down the tests
  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 90
    steps:
    - uses: actions/checkout@v2
      name: Checkout the repository
      with:
        submodules: recursive
    - name: Setup python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
        architecture: x64
    - name: Install Apt dependencies
      run: |
        sudo apt update
        sudo apt install libboost-dev gfortran liblapack-dev libblas-dev libsundials-dev
    - name: Upgrade pip
      run: python3 -m pip install -U pip setuptools wheel
    - name: Install Python dependencies
      run: python3 -m pip install ruamel.yaml scons numpy cython h5py pandas scipy pytest
        pytest-github-actions-annotate-failures gcovr
    - name: Build Cantera
      run: |
        python3 `which scons` build blas_lapack_libs=lapack,blas coverage=y \
        optimize=n skip_slow_tests=y no_optimize_flags='-DNDEBUG -O0' \
        FORTRANFLAGS='-O0' env_vars=all -j2 --debug=time
    - name: Test Cantera
      run:
        python3 `which scons` test show_long_tests=yes verbose_tests=yes --debug=time
    - name: Process coverage files
      run: |
        gcovr --root . --exclude-unreachable-branches --exclude-throw-branches \
        --exclude-directories '\.sconf_temp' --exclude-directories 'build/ext$' \
        --exclude '.*ext.*' --exclude '(.+/)?_cantera\.cpp$' --exclude '^test.*' \
        --xml coverage.xml --html-details htmlcoverage.html --txt
    - name: Archive code coverage results
      uses: actions/upload-artifact@v2
      with:
        name: code-coverage-report
        path: htmlcoverage*
        retention-days: 5
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        verbose: true
        files: ./coverage.xml
        fail_ci_if_error: true

  example-keywords:
    name: Check example keywords
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
        name: Checkout the repository
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Check keywords
        run: python3 doc/example-keywords.py compare

  docs:
    name: Build docs
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      DEPLOY: ${{ github.event_name == 'push' && github.repository_owner == 'Cantera' && endsWith(github.ref, 'main') }}
    steps:
      - uses: actions/checkout@v2
        name: Checkout the repository
        with:
          submodules: recursive
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
          architecture: x64
      - name: Install Apt dependencies
        run: |
          sudo apt update
          sudo apt install libboost-dev doxygen graphviz
      - name: Upgrade pip
        run: python3 -m pip install -U pip setuptools wheel
      - name: Install Python dependencies
        run: |
          python3 -m pip install ruamel.yaml scons numpy cython sphinx\<4.0 jinja2\<3.1.0 \
          sphinxcontrib-katex sphinxcontrib-matlabdomain sphinxcontrib-doxylink
      - name: Build Cantera with documentation
        run: python3 `which scons` build -j2 doxygen_docs=y sphinx_docs=y debug=n optimize=n use_pch=n
      - name: Ensure 'scons help' options work
        run: |
          python3 `which scons` help --options
          python3 `which scons` help --list-options
          python3 `which scons` help --option=prefix
      - name: Parse configuration options from SConstruct as reST
        run: |
          python3 `which scons` help --restructured-text --dev --output=config-options-dev.rst
          mkdir build/docs/scons
          mv config-options-dev.rst build/docs/scons/
      - name: Create archive for docs output
        run: |
          cd build
          tar -czf docs.tar.gz docs
      - name: Store archive of docs output
        uses: actions/upload-artifact@v2
        with:
          path: build/docs.tar.gz
          name: docs
          retention-days: 2
      # The known_hosts key is generated with `ssh-keygen -F cantera.org` from a
      # machine that has previously logged in to cantera.org and trusts
      # that it logged in to the right machine
      - name: Set up SSH key and host for deploy
        if: env.DEPLOY == 'true'
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.CTDEPLOY_KEY }}
          known_hosts: ${{ secrets.CTDEPLOY_HOST }}
      - name: Upload the docs
        if: env.DEPLOY == 'true'
        env:
          RSYNC_USER: "ctdeploy"
          RSYNC_SERVER: "cantera.org"
          RSYNC_DEST: "cantera/documentation/dev"
          DOCS_OUTPUT_DIR: "./build/docs/"
        run: |
          rsync -avzP --checksum --exclude='*.map' --exclude='*.md5' \
          --exclude='/doxygen/xml' --delete --delete-excluded \
          "${DOCS_OUTPUT_DIR}" ${RSYNC_USER}@${RSYNC_SERVER}:${RSYNC_DEST}

  run-examples:
    name: Run the Python examples using bash
    runs-on: ubuntu-18.04
    timeout-minutes: 60
    strategy:
      matrix:
        python-version: ['3.7', '3.9', '3.10']
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
        name: Checkout the repository
        with:
          submodules: recursive
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Install Apt dependencies
        run: |
          sudo apt update
          sudo apt install libboost-dev gfortran graphviz liblapack-dev libblas-dev
      - name: Upgrade pip
        run: python3 -m pip install -U pip setuptools wheel
      - name: Install Python dependencies
        run: python3 -m pip install ruamel.yaml scons numpy cython h5py pandas matplotlib scipy
      - name: Build Cantera
        run: python3 `which scons` build -j2 debug=n
      - name: Run the examples
        # See https://unix.stackexchange.com/a/392973 for an explanation of the -exec part
        run: |
          find interfaces/cython/cantera/examples -type f -iname "*.py" \
          -exec sh -c 'for n; do echo "$n" | tee -a results.txt && python3 "$n" >> results.txt || exit 1; done' sh {} +
        env:
          PYTHONPATH: build/python
          PYTHONWARNINGS: error
          MPLBACKEND: Agg
      - name: Save the results file for inspection
        uses: actions/upload-artifact@v2
        with:
          path: results.txt
          retention-days: 2
          name: example-results
        # Run this step if the job was successful or failed, but not if it was cancelled
        # Using always() would run this step if the job was cancelled as well.
        if: failure() || success()

  multiple-sundials:
    name: Sundials ${{ matrix.sundials-ver }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      PYTHON_VERSION: 3.8
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        sundials-ver: [ 2, 3, 4, 5.8, 6.0 ]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
        name: Checkout the repository
        with:
          submodules: recursive
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ env.PYTHON_VERSION }}
          miniforge-version: latest
          activate-environment: test
        name: Set up conda
      - name: Install conda dependencies
        # See https://github.com/conda-forge/boost-cpp-feedstock/issues/41 for why we
        # use boost-cpp rather than boost from conda-forge
        run: |
          conda install -q sundials=${{ matrix.sundials-ver }} scons numpy ruamel.yaml \
          cython boost-cpp fmt eigen yaml-cpp h5py pandas libgomp openblas pytest
      - name: Build Cantera
        run: |
          scons build system_fmt=y system_eigen=y system_yamlcpp=y system_sundials=y \
          blas_lapack_libs='lapack,blas' -j2 VERBOSE=True debug=n \
          optimize_flags='-O3 -ffast-math -fno-finite-math-only'
      - name: Test Cantera
        run: scons test show_long_tests=yes verbose_tests=yes
      - name: Test Install
        # spot-check installation locations
        run: |
          scons install
          test -f ${CONDA_PREFIX}/lib/libcantera_shared.so
          test -f ${CONDA_PREFIX}/include/cantera/base/Solution.h
          test -f ${CONDA_PREFIX}/bin/ck2yaml
          test -f ${CONDA_PREFIX}/share/cantera/data/gri30.yaml
          test -d ${CONDA_PREFIX}/share/cantera/samples
          test -d ${CONDA_PREFIX}/lib/python${{ env.PYTHON_VERSION }}/site-packages/cantera
      - name: Test Essentials
        # ensure that Python package loads and converter scripts work
        run: |
          python -c 'import cantera as ct; import sys; sys.exit(0) if ct.__version__.startswith("2.6.0") else sys.exit(1)'
          ck2yaml --input=test/data/h2o2.inp --output=h2o2-test.yaml
          test -f h2o2-test.yaml
          cti2yaml test/data/air-no-reactions.cti air-no-reaction-test.yaml
          test -f air-no-reaction-test.yaml

  cython-latest:
    name: Test pre-release version of Cython
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v2
      name: Checkout the repository
      with:
        submodules: recursive
    - name: Setup python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
        architecture: x64
    - name: Install Apt dependencies
      run: |
        sudo apt update
        sudo apt install libboost-dev liblapack-dev libblas-dev
    - name: Upgrade pip
      run: python3 -m pip install -U pip setuptools wheel
    - name: Install Python dependencies
      run: |
        python3 -m pip install ruamel.yaml scons numpy h5py pandas pytest pytest-github-actions-annotate-failures
        python3 -m pip install https://github.com/cython/cython/archive/master.zip --install-option='--no-cython-compile';
    - name: Build Cantera
      run: python3 `which scons` build blas_lapack_libs=lapack,blas python_package='full' -j2 debug=n
    - name: Test Cantera
      run: python3 `which scons` test show_long_tests=yes verbose_tests=yes

  check-deprecations:
    name: Run test suite without legacy typedefs
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v2
      name: Checkout the repository
      with:
        submodules: recursive
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
        architecture: x64
    - name: Install Apt dependencies
      run: |
        sudo apt update
        sudo apt install libboost-dev gfortran libopenmpi-dev
    - name: Upgrade pip
      run: python3 -m pip install -U pip setuptools wheel
    - name: Install Python dependencies
      run: python3 -m pip install ruamel.yaml scons numpy cython h5py pandas pytest
        pytest-github-actions-annotate-failures
    - name: Build Cantera
      run: python3 `which scons` build env_vars=all -j2 debug=n --debug=time no_legacy_reactions=y
    - name: Test Cantera
      run:
        python3 `which scons` test show_long_tests=yes verbose_tests=yes --debug=time

  windows-2022:
    name: ${{ matrix.os }}, MSVC ${{ matrix.vs-toolset }}, Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        os: ["windows-2022"]
        vs-toolset: ["14.3"] # 'cl' is not recognized for earlier toolsets
        python-version: [ "3.7", "3.9", "3.10" ]
      fail-fast: false
    steps:
    - uses: actions/checkout@v2
      name: Checkout the repository
      with:
        submodules: recursive
    - name: Set up conda
      uses: conda-incubator/setup-miniconda@v2
      with:
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}
        mamba-version: "*"
        activate-environment: test
        channels: conda-forge,defaults
        channel-priority: true
    - name: Install conda dependencies
      # See https://github.com/conda-forge/boost-cpp-feedstock/issues/41 for why we
      # use boost-cpp rather than boost from conda-forge
      run: |
        mamba install -q scons numpy cython ruamel.yaml boost-cpp eigen yaml-cpp h5py pandas pytest
      shell: pwsh
    - name: Build Cantera
      run: scons build system_eigen=y system_yamlcpp=y VERBOSE=True
        msvc_version=${{ matrix.vs-toolset }} f90_interface=n debug=n --debug=time -j2
      shell: pwsh
    - name: Test Cantera
      run: scons test show_long_tests=yes verbose_tests=yes --debug=time
      shell: pwsh
    - name: Test Install
      # spot-check installation locations
      run: |
        scons install
        test -f ${CONDA_PREFIX}/Library/lib/cantera_shared.dll
        test -f ${CONDA_PREFIX}/Library/include/cantera/base/Solution.h
        test -f ${CONDA_PREFIX}/Scripts/ck2yaml
        test -f ${CONDA_PREFIX}/share/cantera/data/gri30.yaml
        test -d ${CONDA_PREFIX}/share/cantera/samples
        test -d ${CONDA_PREFIX}/Lib/site-packages/cantera
    - name: Test Essentials
      # ensure that Python package loads and converter scripts work
      run: |
        python -c 'import cantera as ct; import sys; sys.exit(0) if ct.__version__.startswith("2.6.0") else sys.exit(1)'
        ck2yaml --input=test/data/h2o2.inp --output=h2o2-test.yaml
        test -f h2o2-test.yaml
        cti2yaml test/data/air-no-reactions.cti air-no-reaction-test.yaml
        test -f air-no-reaction-test.yaml

  windows:
    name: "Windows 2019, MSVC ${{ matrix.vs-toolset }}, Python ${{ matrix.python-version }}"
    runs-on: windows-2019
    timeout-minutes: 60
    env:
      BOOST_ROOT: ${{github.workspace}}/3rdparty/boost
      BOOST_URL: https://boostorg.jfrog.io/artifactory/main/release/1.78.0/source/boost_1_78_0.7z
    strategy:
      matrix:
        vs-toolset: ['14.0', '14.2']
        python-version: [ "3.7", "3.9", "3.10" ]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
        name: Checkout the repository
        with:
          submodules: recursive
      - name: Set Up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Install Python dependencies
        run: |
          python -m pip install -U pip setuptools wheel
          python -m pip install scons pypiwin32 numpy ruamel.yaml cython h5py pandas pytest pytest-github-actions-annotate-failures
      - name: Restore Boost cache
        uses: actions/cache@v2
        id: cache-boost
        with:
          path: ${{env.BOOST_ROOT}}
          key: boost

      - name: Install Boost Headers
        if: steps.cache-boost.outputs.cache-hit != 'true'
        run: |
          BOOST_ROOT=$(echo $BOOST_ROOT | sed 's/\\/\//g')
          mkdir -p $BOOST_ROOT
          curl --progress-bar --location --output $BOOST_ROOT/download.7z $BOOST_URL
          7z -o$BOOST_ROOT x $BOOST_ROOT/download.7z -y -bd boost_1_78_0/boost
          mv $BOOST_ROOT/boost_1_78_0/boost $BOOST_ROOT/boost
          rm $BOOST_ROOT/download.7z
        shell: bash
      - name: Build Cantera
        run: scons build -j2 boost_inc_dir=%BOOST_ROOT% debug=n VERBOSE=y
          python_package=full env_vars=PYTHONPATH,GITHUB_ACTIONS
          msvc_version=${{ matrix.vs-toolset }} f90_interface=n --debug=time
        shell: cmd
      - name: Test Cantera
        run: scons test show_long_tests=yes verbose_tests=yes --debug=time

  # Adapted from https://www.scivision.dev/intel-oneapi-github-actions/
  linux-intel-oneapi:
    name: intel-oneAPI on Ubuntu, Python 3.8
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      INTEL_REPO: https://apt.repos.intel.com
      INTEL_KEY: GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
    steps:
    - name: Intel Apt repository
      timeout-minutes: 1
      run: |
        wget ${INTEL_REPO}/intel-gpg-keys/${INTEL_KEY}
        sudo apt-key add ${INTEL_KEY}
        rm ${INTEL_KEY}
        echo "deb ${INTEL_REPO}/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update
    - name: Install Intel oneAPI
      timeout-minutes: 5
      run: |
        sudo apt-get install intel-oneapi-compiler-fortran intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic \
        intel-oneapi-mpi intel-oneapi-mpi-devel intel-oneapi-mkl ninja-build libboost-dev
    - uses: actions/checkout@v2
      name: Checkout the repository
      with:
        submodules: recursive
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
        architecture: x64
    - name: Upgrade pip
      run: python3 -m pip install -U pip setuptools wheel
    - name: Install Python dependencies
      run: python3 -m pip install ruamel.yaml scons numpy cython h5py pandas pytest
        pytest-github-actions-annotate-failures
    - name: Setup Intel oneAPI environment
      run: |
        source /opt/intel/oneapi/setvars.sh
        printenv >> $GITHUB_ENV
    - name: Build Cantera
      run: python3 `which scons` build env_vars=all CC=icx CXX=icpx FORTRAN=ifx -j2 debug=n --debug=time
    - name: Test Cantera
      run:
        python3 `which scons` test show_long_tests=yes verbose_tests=yes --debug=time

  linux-intel-oneapi-classic:
    name: intel-oneAPI classic on Ubuntu, Python 3.8
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      INTEL_REPO: https://apt.repos.intel.com
      INTEL_KEY: GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
    steps:
    - name: Intel Apt repository
      timeout-minutes: 1
      run: |
        wget ${INTEL_REPO}/intel-gpg-keys/${INTEL_KEY}
        sudo apt-key add ${INTEL_KEY}
        rm ${INTEL_KEY}
        echo "deb ${INTEL_REPO}/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update
    - name: Install Intel oneAPI
      timeout-minutes: 5
      run: |
        sudo apt-get install intel-oneapi-compiler-fortran intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic \
        intel-oneapi-mpi intel-oneapi-mpi-devel intel-oneapi-mkl ninja-build libboost-dev
    - uses: actions/checkout@v2
      name: Checkout the repository
      with:
        submodules: recursive
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
        architecture: x64
    - name: Upgrade pip
      run: python3 -m pip install -U pip setuptools wheel
    - name: Install Python dependencies
      run: python3 -m pip install ruamel.yaml scons numpy cython h5py pandas pytest
        pytest-github-actions-annotate-failures
    - name: Setup Intel oneAPI environment
      run: |
        source /opt/intel/oneapi/setvars.sh
        printenv >> $GITHUB_ENV
    - name: Build Cantera
      run: python3 `which scons` build env_vars=all CC=icc CXX=icpc FORTRAN=ifort -j2 debug=n --debug=time
    - name: Test Cantera
      run:
        python3 `which scons` test show_long_tests=yes verbose_tests=yes --debug=time

  windows-mingw:
    name: mingw on Windows, Python 3.8
    runs-on: windows-2019
    timeout-minutes: 60
    env:
      BOOST_ROOT: ${{github.workspace}}/3rdparty/boost
      BOOST_URL: https://boostorg.jfrog.io/artifactory/main/release/1.78.0/source/boost_1_78_0.7z
    steps:
    - uses: actions/checkout@v2
      name: Checkout the repository
      with:
        submodules: recursive
    - name: Set Up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
        architecture: x64
    - name: Install Python dependencies
      run: |
        python -m pip install -U pip 'setuptools>=47.0.0,<48' wheel
        python -m pip install scons pypiwin32 numpy ruamel.yaml cython h5py pandas pytest pytest-github-actions-annotate-failures
    - name: Restore Boost cache
      uses: actions/cache@v2
      id: cache-boost
      with:
        path: ${{env.BOOST_ROOT}}
        key: boost
    - name: Set up MinGW
      uses: egor-tensin/setup-mingw@v2
      with:
        platform: x64
    - name: Install Boost Headers
      if: steps.cache-boost.outputs.cache-hit != 'true'
      run: |
        BOOST_ROOT=$(echo $BOOST_ROOT | sed 's/\\/\//g')
        mkdir -p $BOOST_ROOT
        curl --progress-bar --location --output $BOOST_ROOT/download.7z $BOOST_URL
        7z -o$BOOST_ROOT x $BOOST_ROOT/download.7z -y -bd boost_1_78_0/boost
        mv $BOOST_ROOT/boost_1_78_0/boost $BOOST_ROOT/boost
        rm $BOOST_ROOT/download.7z
      shell: bash
    - name: Build Cantera
      run: scons build -j2 boost_inc_dir=%BOOST_ROOT% debug=n VERBOSE=y
        python_package=full env_vars=PYTHONPATH,GITHUB_ACTIONS
        toolchain=mingw f90_interface=n --debug=time
      shell: cmd
    - name: Test Cantera
      run: scons test show_long_tests=yes verbose_tests=yes --debug=time
